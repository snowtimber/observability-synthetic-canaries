AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploy CloudWatch Synthetic Canaries for monitoring

Resources:
  CanaryArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'AWS::StackName', 'canary-artifacts', !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]]]]

  CanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - synthetics.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: SyntheticsS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketLocation
                  - s3:HeadBucket
                Resource:
                  - !GetAtt CanaryArtifactsBucket.Arn
                  - !Sub ${CanaryArtifactsBucket.Arn}/*
                  - arn:aws:s3:::0-arxiv-data
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'
        - PolicyName: SyntheticsCloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  HeartbeatCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: heartbeat-canary
      ArtifactS3Location: !Join ['', ['s3://', !Ref CanaryArtifactsBucket, '/heartbeat-canary/']]
      ExecutionRoleArn: !GetAtt CanaryRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-9.0
      Schedule:
        Expression: rate(1 minute)
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 60
      Code:
        Handler: index.handler
        Script: |
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          const syntheticsConfiguration = synthetics.getConfiguration();

          const loadBlueprint = async function () {
              const url = 'https://amazon.com';
              const takeScreenshot = true;

              syntheticsConfiguration.disableStepScreenshots();
              syntheticsConfiguration.setConfig({
                 continueOnStepFailure: true,
                 includeRequestHeaders: true,
                 includeResponseHeaders: true,
                 restrictedHeaders: [],
                 restrictedUrlParameters: []
              });

              let page = await synthetics.getPage();
              await loadUrl(page, url, takeScreenshot);
          };

          const loadUrl = async function (page, url, takeScreenshot) {
              let stepName = null;
              let domcontentloaded = false;

              try {
                  stepName = new URL(url).hostname;
              } catch (e) {
                  const errorString = `Error parsing url: ${url}. ${e}`;
                  log.error(errorString);
                  throw e;
              }

              await synthetics.executeStep(stepName, async function () {
                  const response = await page.goto(url, { waitUntil: ['domcontentloaded'], timeout: 30000});
                  if (response) {
                      domcontentloaded = true;
                      const status = response.status();
                      const statusText = response.statusText();

                      if (response.status() < 200 || response.status() > 299) {
                          throw new Error(`Failed to load url: ${url} ${response.status()} ${response.statusText()}`);
                      }
                  } else {
                      const logNoResponseString = `No response returned for url: ${url}`;
                      log.error(logNoResponseString);
                      throw new Error(logNoResponseString);
                  }
              });

              if (domcontentloaded && takeScreenshot) {
                  await new Promise(r => setTimeout(r, 15000));
                  await synthetics.takeScreenshot(stepName, 'loaded');
              }
          };

          exports.handler = async () => {
              return await loadBlueprint();
          };
    DependsOn: CanaryArtifactsBucket

  APICanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: api-canary
      ArtifactS3Location: !Join ['', ['s3://', !Ref CanaryArtifactsBucket, '/api-canary/']]
      ExecutionRoleArn: !GetAtt CanaryRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-9.0
      Schedule:
        Expression: rate(1 minute)
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 60
      Code:
        Handler: index.handler
        Script: |
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');
          const https = require('https');

          const apiCanaryBlueprint = async function () {
              const urls = [
                  'https://sentinel-s2-l1c.s3.eu-central-1.amazonaws.com',
                  'https://usgs-landsat.s3.us-west-2.amazonaws.com/usgs-landsat/collection02/'
              ];

              const validateSuccessful = async function(res) {
                  return new Promise((resolve, reject) => {
                      if (res.statusCode < 200 || res.statusCode > 299) {
                          reject(new Error(res.statusCode + ' ' + res.statusMessage));
                      } else {
                          resolve();
                      }
                  });
              };

              for (const url of urls) {
                  const stepName = new URL(url).hostname;
                  await synthetics.executeStep(stepName, async function () {
                      const response = await new Promise((resolve, reject) => {
                          const req = https.request(url, { method: 'HEAD' }, (res) => {
                              resolve(res);
                          });

                          req.on('error', (error) => {
                              reject(error);
                          });

                          req.end();
                      });

                      await validateSuccessful(response);
                      log.info(`${stepName} HEAD request successful`);
                  });
              }
          };

          exports.handler = async () => {
              return await apiCanaryBlueprint();
          };
    DependsOn: CanaryArtifactsBucket

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: MonitoringDashboard
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Synthetics,CanaryName} MetricName=\"Duration\" CanaryName=\"heartbeat-canary\"', 'Average', 60)", "label": "Heartbeat Latency", "id": "e1" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Heartbeat Latency",
                "period": 60
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Synthetics,CanaryName} MetricName=\"SuccessPercent\" CanaryName=\"heartbeat-canary\"', 'Average', 60)", "label": "Heartbeat Availability", "id": "e2" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Heartbeat Availability",
                "period": 60
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Synthetics,CanaryName} MetricName=\"Duration\" CanaryName=\"api-canary\"', 'Average', 60)", "label": "API Latency", "id": "e3" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Latency",
                "period": 60
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ { "expression": "SEARCH('{AWS/Synthetics,CanaryName} MetricName=\"SuccessPercent\" CanaryName=\"api-canary\"', 'Average', 60)", "label": "API Availability", "id": "e4" } ]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "API Availability",
                "period": 60
              }
            }
          ]
        }

Outputs:
  HeartbeatCanaryName:
    Description: Name of the Heartbeat Canary
    Value: !Ref HeartbeatCanary
  APICanaryName:
    Description: Name of the API Canary
    Value: !Ref APICanary
  DashboardName:
    Description: Name of the CloudWatch Dashboard
    Value: !Ref CloudWatchDashboard
  CanaryArtifactsBucketName:
    Description: Name of the S3 bucket for storing Canary artifacts
    Value: !Ref CanaryArtifactsBucket