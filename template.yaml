AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Deploy CloudWatch Synthetic Canaries for monitoring and API Gateway

Resources:
  CanaryArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref 'AWS::StackName', 'canary-artifacts', !Select [0, !Split ['-', !Select [2, !Split ['/', !Ref 'AWS::StackId']]]]]]

  CanaryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - synthetics.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: SyntheticsS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetBucketLocation
                  - s3:ListAllMyBuckets
                Resource:
                  - !GetAtt CanaryArtifactsBucket.Arn
                  - !Sub ${CanaryArtifactsBucket.Arn}/*
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                Resource: '*'
        - PolicyName: SyntheticsCloudWatchAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: APIGatewayInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${SimpleAPI}/*/*/*"

  HeartbeatCanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: heartbeat-canary
      ArtifactS3Location: !Join ['', ['s3://', !Ref CanaryArtifactsBucket, '/heartbeat-canary/']]
      ExecutionRoleArn: !GetAtt CanaryRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-7.0
      Schedule:
        Expression: rate(1 minute)
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 60
      Code:
        Handler: index.handler
        Script: |
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const pageLoadBlueprint = async function () {
              const url = 'https://amazon.com';

              let page = await synthetics.getPage();
              const response = await page.goto(url, {waitUntil: 'domcontentloaded', timeout: 30000});
              
              if (!response) {
                  throw 'Failed to load page!';
              }
              
              await synthetics.takeScreenshot('loaded', 'loaded');
              let pageTitle = await page.title();
              log.info('Page title: ' + pageTitle);
              
              if (response.status() !== 200) {
                  throw 'Fail: ' + response.status();
              }
          };

          exports.handler = async () => {
              return await pageLoadBlueprint();
          };
    DependsOn: CanaryArtifactsBucket

  SimpleAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: Simple API for Canary Testing
        paths:
          /test:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: "200 response"
                  schema:
                    type: object
                    properties:
                      message:
                        type: string
              x-amazon-apigateway-integration:
                type: mock
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    statusCode: 200
                    responseTemplates:
                      application/json: '{"message": "Test successful"}'

  APICanary:
    Type: AWS::Synthetics::Canary
    Properties:
      Name: api-canary
      ArtifactS3Location: !Join ['', ['s3://', !Ref CanaryArtifactsBucket, '/api-canary/']]
      ExecutionRoleArn: !GetAtt CanaryRole.Arn
      RuntimeVersion: syn-nodejs-puppeteer-7.0
      Schedule:
        Expression: rate(1 minute)
      StartCanaryAfterCreation: true
      RunConfig:
        TimeoutInSeconds: 60
        EnvironmentVariables:
          API_ENDPOINT: !Sub "https://${SimpleAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"
      Code:
        Handler: index.handler
        Script: |
          const synthetics = require('Synthetics');
          const log = require('SyntheticsLogger');

          const apiCanaryBlueprint = async function () {
              const postData = JSON.stringify({ test: 'data' });
              const apiUrl = process.env.API_ENDPOINT;

              log.info(`Base API URL: ${apiUrl}`);

              const url = new URL('/test', apiUrl);
              log.info(`Full API URL: ${url.toString()}`);

              const requestOptions = {
                  hostname: url.hostname,
                  port: 443,
                  protocol: url.protocol,
                  path: url.pathname,
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                      'Content-Length': Buffer.byteLength(postData)
                  }
              };

              log.info(`Request options: ${JSON.stringify(requestOptions)}`);

              try {
                  log.info('Starting API POST Test');
                  const { response } = await synthetics.executeHttpStep('API POST Test', requestOptions, postData);
                  
                  log.info(`Response status: ${response.statusCode}`);
                  log.info(`Response headers: ${JSON.stringify(response.headers)}`);
                  log.info(`Response body: ${response.body}`);

                  if (response.statusCode < 200 || response.statusCode > 299) {
                      throw new Error(`Request failed with status ${response.statusCode}`);
                  }

                  log.info('API POST request successful');
              } catch (error) {
                  log.error(`API POST Test failed: ${error.message}`);
                  log.error(`Error stack: ${error.stack}`);
                  throw error;
              }
          };

          exports.handler = async () => {
              try {
                  log.info('Starting canary execution');
                  await apiCanaryBlueprint();
                  log.info('Canary execution completed successfully');
              } catch (error) {
                  log.error(`Canary execution failed: ${error.message}`);
                  throw error;
              }
          };
    DependsOn: SimpleAPI

  CloudWatchDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: MonitoringDashboard
      DashboardBody: !Sub |
        {
            "widgets": [
                {
                    "height": 6,
                    "width": 12,
                    "y": 10,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "CloudWatchSynthetics", "SuccessPercent", "CanaryName", "api-canary" ],
                            [ "...", "heartbeat-canary" ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "SuccessPercent"
                    }
                },
                {
                    "type": "metric",
                    "x": 0,
                    "y": 0,
                    "width": 24,
                    "height": 10,
                    "properties": {
                        "sparkline": false,
                        "view": "table",
                        "metrics": [
                            [ "CloudWatchSynthetics", "2xx" ],
                            [ ".", "4xx" ],
                            [ ".", "5xx" ],
                            [ ".", "Duration" ],
                            [ ".", "Failed" ],
                            [ ".", "Failed requests" ],
                            [ ".", "SuccessPercent" ]
                        ],
                        "region": "${AWS::Region}"
                    }
                },
                {
                    "type": "metric",
                    "x": 12,
                    "y": 10,
                    "width": 12,
                    "height": 6,
                    "properties": {
                        "view": "timeSeries",
                        "stacked": true,
                        "metrics": [
                            [ "CloudWatchSynthetics", "SuccessPercent", "CanaryName", "api-canary", "StepName", "API POST Test" ],
                            [ ".", "Duration", ".", ".", ".", "." ],
                            [ ".", "SuccessPercent", ".", "heartbeat-canary", ".", "amazon.com" ],
                            [ ".", "Duration", ".", ".", ".", "." ]
                        ],
                        "region": "${AWS::Region}"
                    }
                }
            ]
        }

Outputs:
  HeartbeatCanaryName:
    Description: Name of the Heartbeat Canary
    Value: !Ref HeartbeatCanary
  APICanaryName:
    Description: Name of the API Canary
    Value: !Ref APICanary
  DashboardName:
    Description: Name of the CloudWatch Dashboard
    Value: !Ref CloudWatchDashboard
  CanaryArtifactsBucketName:
    Description: Name of the S3 bucket for storing Canary artifacts
    Value: !Ref CanaryArtifactsBucket
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${SimpleAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  SampleCurlCommand:
    Description: Sample curl command to invoke the API endpoint
    Value: !Sub |
      curl -X POST \
        -H "Content-Type: application/json" \
        -d '{"test": "data"}' \
        https://${SimpleAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/test